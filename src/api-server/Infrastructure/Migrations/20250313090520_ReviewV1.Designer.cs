// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250313090520_ReviewV1")]
    partial class ReviewV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.JMDict.Entry", b =>
                {
                    b.Property<string>("ent_seq")
                        .HasColumnType("text");

                    b.Property<int?>("PriorityScore")
                        .HasColumnType("integer");

                    b.Property<int?>("SelectedKanjiIndex")
                        .HasColumnType("integer");

                    b.Property<int>("SelectedReadingIndex")
                        .HasColumnType("integer");

                    b.HasKey("ent_seq");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.KanjiElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ent_seq")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("ke_inf")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ke_pri")
                        .HasColumnType("text");

                    b.Property<string>("keb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ent_seq");

                    b.ToTable("KanjiElements");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.LSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LangValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SenseId")
                        .HasColumnType("integer");

                    b.Property<string>("lang")
                        .HasColumnType("text");

                    b.Property<bool>("ls_part")
                        .HasColumnType("boolean");

                    b.Property<bool>("ls_wasei")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SenseId");

                    b.ToTable("LSource");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.ReadingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ent_seq")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("re_inf")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("re_nokanji")
                        .HasColumnType("boolean");

                    b.Property<string>("re_pri")
                        .HasColumnType("text");

                    b.Property<List<string>>("re_restr")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("reb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ent_seq");

                    b.ToTable("ReadingElements");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.Sense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("ant")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("dial")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ent_seq")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("field")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("gloss")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("misc")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("pos")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("s_inf")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("stagk")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("stagr")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("xref")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ent_seq");

                    b.HasIndex("gloss")
                        .HasDatabaseName("IX_Sense_Gloss");

                    b.ToTable("Senses");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.EntryEvent", b =>
                {
                    b.Property<string>("ent_seq")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Serial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Serial"));

                    b.Property<string>("ChangeValue")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewValue")
                        .HasColumnType("text");

                    b.HasKey("ent_seq", "UserId", "Serial");

                    b.ToTable("EntryEvents");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.EntryIsTagged", b =>
                {
                    b.Property<string>("ent_seq")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedToTagDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserOrder")
                        .HasColumnType("integer");

                    b.HasKey("ent_seq", "UserId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EntryIsTagged");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.StudySet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("BaseQueue")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("LastStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("LearningQueue")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("NewEntryCount")
                        .HasColumnType("integer");

                    b.Property<int>("NewEntryGoal")
                        .HasColumnType("integer");

                    b.Property<List<string>>("NewQueue")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StudySets");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalEntries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalKnown")
                        .HasColumnType("integer");

                    b.Property<int>("TotalLearning")
                        .HasColumnType("integer");

                    b.Property<int>("TotalNew")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReviewing")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.TagInStudySet", b =>
                {
                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudySetId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("TagId", "StudySetId");

                    b.HasIndex("StudySetId");

                    b.ToTable("TagInStudySets");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.TrackedEntry", b =>
                {
                    b.Property<string>("ent_seq")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LevelStateType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OldLevelStateType")
                        .HasColumnType("text");

                    b.Property<int>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<TimeSpan?>("SpacedTime")
                        .HasColumnType("interval");

                    b.Property<string>("SpecialCategory")
                        .HasColumnType("text");

                    b.HasKey("ent_seq", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TrackedEntries");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RefreshToken")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.KanjiElement", b =>
                {
                    b.HasOne("Domain.Entities.JMDict.Entry", "Entry")
                        .WithMany("KanjiElements")
                        .HasForeignKey("ent_seq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.LSource", b =>
                {
                    b.HasOne("Domain.Entities.JMDict.Sense", "Sense")
                        .WithMany("lsource")
                        .HasForeignKey("SenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.ReadingElement", b =>
                {
                    b.HasOne("Domain.Entities.JMDict.Entry", "Entry")
                        .WithMany("ReadingElements")
                        .HasForeignKey("ent_seq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.Sense", b =>
                {
                    b.HasOne("Domain.Entities.JMDict.Entry", "Entry")
                        .WithMany("Senses")
                        .HasForeignKey("ent_seq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.EntryEvent", b =>
                {
                    b.HasOne("Domain.Entities.Tracking.TrackedEntry", "TrackedEntry")
                        .WithMany("EntryEvents")
                        .HasForeignKey("ent_seq", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrackedEntry");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.EntryIsTagged", b =>
                {
                    b.HasOne("Domain.Entities.Tracking.Tag", "Tag")
                        .WithMany("EntryIsTaggeds")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tracking.TrackedEntry", "TrackedEntry")
                        .WithMany("EntryIsTaggeds")
                        .HasForeignKey("ent_seq", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("TrackedEntry");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.StudySet", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("StudySets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.Tag", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.TagInStudySet", b =>
                {
                    b.HasOne("Domain.Entities.Tracking.StudySet", "StudySet")
                        .WithMany("TagInStudySets")
                        .HasForeignKey("StudySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tracking.Tag", "Tag")
                        .WithMany("TagInStudySets")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudySet");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.TrackedEntry", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("TrackedEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.JMDict.Entry", "Entry")
                        .WithMany("TrackedEntries")
                        .HasForeignKey("ent_seq")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.Entry", b =>
                {
                    b.Navigation("KanjiElements");

                    b.Navigation("ReadingElements");

                    b.Navigation("Senses");

                    b.Navigation("TrackedEntries");
                });

            modelBuilder.Entity("Domain.Entities.JMDict.Sense", b =>
                {
                    b.Navigation("lsource");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.StudySet", b =>
                {
                    b.Navigation("TagInStudySets");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.Tag", b =>
                {
                    b.Navigation("EntryIsTaggeds");

                    b.Navigation("TagInStudySets");
                });

            modelBuilder.Entity("Domain.Entities.Tracking.TrackedEntry", b =>
                {
                    b.Navigation("EntryEvents");

                    b.Navigation("EntryIsTaggeds");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("StudySets");

                    b.Navigation("Tags");

                    b.Navigation("TrackedEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
